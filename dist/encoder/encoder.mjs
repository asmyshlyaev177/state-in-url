import{SYMBOLS as t}from"../constants/constants.mjs";import{typeOf as e}from"../utils.mjs";function n(n){if(c(n))return n;switch(e(n)){case"function":case"symbol":return"";case"date":return r=n,t.date+new Date(r).toISOString();case"undefined":return t.undefined;default:return JSON.stringify(n).replaceAll('"',"'")}var r}function r(t,e){return i(t.replaceAll("'",'"'),e)}const s=e=>{if(e!==t.undefined)return e?.startsWith?.(t.date)?new Date(e.slice(1)):e===t.null?null:e?.startsWith?.(t.number)?Number.parseFloat(e.replace(t.number,"")):e?.startsWith?.(t.boolean)?!!e.includes("true"):e?.startsWith?.(t.string)?decodeURIComponent(e).replace(/^â—–/,""):u},u=Symbol("isError"),a=(t,e)=>{const n="string"==typeof e,r=n&&s(e);return r===u?e:n?r:e};function i(t,e){try{return JSON.parse(t,a)}catch{const n=s(t);return n!==u?n:e}}const o=new RegExp(`^(${t.string}|${t.boolean}|${t.null}|${t.undefined}|${t.number}|${t.date})`),c=t=>o.test(String(t));export{r as decode,s as decodePrimitive,n as encode,u as errorSym,i as parseJSON,a as reviver};
