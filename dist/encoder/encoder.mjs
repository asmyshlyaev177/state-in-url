import{SYMBOLS as n}from"../constants/constants.mjs";import{typeOf as u}from"../utils.mjs";const f=/'/g;const y=/"/g;const g=/%27/g;function l(e){if(typeof e==="function"||typeof e==="symbol")return"";if(O(e)){return e}return JSON.stringify(structuredClone(e),i).replace(f,"%27").replace(y,"'")}function i(e,r){const o=u(r);if(o!=="object"&&o!=="array"){return s(r)}if(o==="object"){const t=r;for(const c of Object.keys(t)){t[c]=i(e,t[c])}return t}if(o==="array"){return r.map(t=>i(e,t))}return r}const s=e=>{switch(u(e)){case"date":return n.date+new Date(e).toISOString();case"undefined":return n.undefined;default:return e}};function m(e,r){return a(e.replace(f,'"').replace(g,"'"),r)}function a(e,r){try{return JSON.parse(e,d)}catch{return r}}function d(e,r){return typeof r==="string"?p(r):r}const p=e=>{if(e===n.undefined)return void 0;if(e?.startsWith?.(n.date))return new Date(e.slice(1));return e};const S=new RegExp(`^(${n.undefined}|${n.date})`);const O=e=>S.test(String(e));export{m as decode,p as decodePrimitive,l as encode,s as encodePrimitive,a as parseJSON,d as reviver};
