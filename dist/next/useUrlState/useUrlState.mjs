import s from"react";import{useRouter as k,useSearchParams as v}from"next/navigation";import{parseSPObj as p}from"../../parseSPObj.mjs";import{useUrlStateBase as j}from"../../useUrlStateBase/useUrlStateBase.mjs";import{routerHistory as m,filterUnknownParams as f,isSSR as C,filterUnknownParamsClient as w,getSearch as y}from"../../utils.mjs";function E(r,t){const o=t?.useHistory;const a=k();const S=s.useMemo(()=>({push:(...e)=>{if(o===void 0?true:!!o){m.push(...e)}else{a.push(...e)}},replace:(...e)=>{if(o===void 0?true:!!o){m.replace(...e)}else{a.replace(...e)}}}),[a]);const{state:U,updateState:l,updateUrl:c,reset:n,getState:d,pendingUrlUpdate:h}=j(r,S,({parse:e})=>{return C?p(f(r,t?.searchParams),r):e(w(r,t?.searchParams||y()))});const u=v();s.useEffect(()=>{if(!h()){l(f(r,p(Object.fromEntries([...u.entries()]),r)))}},[u]);const i=s.useMemo(()=>{const e={...H};if(t?.scroll!==void 0)e.scroll=t.scroll;if(t?.replace!==void 0)e.replace=t.replace;return e},[t?.scroll,t?.replace]);const P=s.useCallback((e,g)=>c(e,{...i,...g}),[c]);const b=s.useCallback(e=>{n({...i,...e})},[n]);return{setState:l,setUrl:P,urlState:U,reset:b,getState:d}}const H={replace:true,scroll:false};export{E as useUrlState};
