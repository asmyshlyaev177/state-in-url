name: Playwright Tests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.45.0-jammy
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    - name: Install dependencies
      run: npm ci
    - name: Unit tests
      run: npm run test:unit
    - name: setup Playwright
      run: |
        npx cross-env HOME=/root PLAYWRIGHT_BROWSERS_PATH=0 npx playwright install chromium firefox webkit
    - name: Run Playwright tests
      run: |
        npx cross-env HOME=/root PLAYWRIGHT_BROWSERS_PATH=0 npm run test:int:ci
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 10

  # # Build job
  # build-gh-pages:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref_name == 'main'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Detect package manager
  #       id: detect-package-manager
  #       run: |
  #         if [ -f "${{ github.workspace }}/yarn.lock" ]; then
  #           echo "manager=yarn" >> $GITHUB_OUTPUT
  #           echo "command=install" >> $GITHUB_OUTPUT
  #           echo "runner=yarn" >> $GITHUB_OUTPUT
  #           exit 0
  #         elif [ -f "${{ github.workspace }}/package.json" ]; then
  #           echo "manager=npm" >> $GITHUB_OUTPUT
  #           echo "command=ci" >> $GITHUB_OUTPUT
  #           echo "runner=npx --no-install" >> $GITHUB_OUTPUT
  #           exit 0
  #         else
  #           echo "Unable to determine package manager"
  #           exit 1
  #         fi
  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: '.nvmrc'
  #         cache: ${{ steps.detect-package-manager.outputs.manager }}
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v5
  #       with:
  #         # Automatically inject basePath in your Next.js configuration file and disable
  #         # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
  #         #
  #         # You may remove this line if you want to manage the configuration yourself.
  #         static_site_generator: next
  #     - name: Restore cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           .next/cache
  #         # Generate a new cache whenever packages or source files change.
  #         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
  #         # If source files changed but packages didn't, rebuild from a prior cache.
  #         restore-keys: |
  #           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
  #     - name: Install dependencies
  #       run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
  #     - name: Build with Next.js
  #       run: ${{ steps.detect-package-manager.outputs.manager }} run build:demo
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: ./packages/example-nextjs/out

  # # Deployment job
  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   if: github.ref_name == 'main'
  #   needs: build-gh-pages
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
